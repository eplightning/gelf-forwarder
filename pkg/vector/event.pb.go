// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: vector/event.proto

package vector

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ValueNull int32

const (
	ValueNull_NULL_VALUE ValueNull = 0
)

// Enum value maps for ValueNull.
var (
	ValueNull_name = map[int32]string{
		0: "NULL_VALUE",
	}
	ValueNull_value = map[string]int32{
		"NULL_VALUE": 0,
	}
)

func (x ValueNull) Enum() *ValueNull {
	p := new(ValueNull)
	*p = x
	return p
}

func (x ValueNull) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueNull) Descriptor() protoreflect.EnumDescriptor {
	return file_vector_event_proto_enumTypes[0].Descriptor()
}

func (ValueNull) Type() protoreflect.EnumType {
	return &file_vector_event_proto_enumTypes[0]
}

func (x ValueNull) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueNull.Descriptor instead.
func (ValueNull) EnumDescriptor() ([]byte, []int) {
	return file_vector_event_proto_rawDescGZIP(), []int{0}
}

type StatisticKind int32

const (
	StatisticKind_Histogram StatisticKind = 0
	StatisticKind_Summary   StatisticKind = 1
)

// Enum value maps for StatisticKind.
var (
	StatisticKind_name = map[int32]string{
		0: "Histogram",
		1: "Summary",
	}
	StatisticKind_value = map[string]int32{
		"Histogram": 0,
		"Summary":   1,
	}
)

func (x StatisticKind) Enum() *StatisticKind {
	p := new(StatisticKind)
	*p = x
	return p
}

func (x StatisticKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatisticKind) Descriptor() protoreflect.EnumDescriptor {
	return file_vector_event_proto_enumTypes[1].Descriptor()
}

func (StatisticKind) Type() protoreflect.EnumType {
	return &file_vector_event_proto_enumTypes[1]
}

func (x StatisticKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatisticKind.Descriptor instead.
func (StatisticKind) EnumDescriptor() ([]byte, []int) {
	return file_vector_event_proto_rawDescGZIP(), []int{1}
}

type Metric_Kind int32

const (
	Metric_Incremental Metric_Kind = 0
	Metric_Absolute    Metric_Kind = 1
)

// Enum value maps for Metric_Kind.
var (
	Metric_Kind_name = map[int32]string{
		0: "Incremental",
		1: "Absolute",
	}
	Metric_Kind_value = map[string]int32{
		"Incremental": 0,
		"Absolute":    1,
	}
)

func (x Metric_Kind) Enum() *Metric_Kind {
	p := new(Metric_Kind)
	*p = x
	return p
}

func (x Metric_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metric_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_vector_event_proto_enumTypes[2].Descriptor()
}

func (Metric_Kind) Type() protoreflect.EnumType {
	return &file_vector_event_proto_enumTypes[2]
}

func (x Metric_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metric_Kind.Descriptor instead.
func (Metric_Kind) EnumDescriptor() ([]byte, []int) {
	return file_vector_event_proto_rawDescGZIP(), []int{5, 0}
}

type EventWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*EventWrapper_Log
	//	*EventWrapper_Metric
	Event isEventWrapper_Event `protobuf_oneof:"event"`
}

func (x *EventWrapper) Reset() {
	*x = EventWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vector_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventWrapper) ProtoMessage() {}

func (x *EventWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_vector_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventWrapper.ProtoReflect.Descriptor instead.
func (*EventWrapper) Descriptor() ([]byte, []int) {
	return file_vector_event_proto_rawDescGZIP(), []int{0}
}

func (m *EventWrapper) GetEvent() isEventWrapper_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *EventWrapper) GetLog() *Log {
	if x, ok := x.GetEvent().(*EventWrapper_Log); ok {
		return x.Log
	}
	return nil
}

func (x *EventWrapper) GetMetric() *Metric {
	if x, ok := x.GetEvent().(*EventWrapper_Metric); ok {
		return x.Metric
	}
	return nil
}

type isEventWrapper_Event interface {
	isEventWrapper_Event()
}

type EventWrapper_Log struct {
	Log *Log `protobuf:"bytes,1,opt,name=log,proto3,oneof"`
}

type EventWrapper_Metric struct {
	Metric *Metric `protobuf:"bytes,2,opt,name=metric,proto3,oneof"`
}

func (*EventWrapper_Log) isEventWrapper_Event() {}

func (*EventWrapper_Metric) isEventWrapper_Event() {}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields map[string]*Value `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vector_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_vector_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_vector_event_proto_rawDescGZIP(), []int{1}
}

func (x *Log) GetFields() map[string]*Value {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ValueMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields map[string]*Value `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ValueMap) Reset() {
	*x = ValueMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vector_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueMap) ProtoMessage() {}

func (x *ValueMap) ProtoReflect() protoreflect.Message {
	mi := &file_vector_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueMap.ProtoReflect.Descriptor instead.
func (*ValueMap) Descriptor() ([]byte, []int) {
	return file_vector_event_proto_rawDescGZIP(), []int{2}
}

func (x *ValueMap) GetFields() map[string]*Value {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ValueArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Value `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ValueArray) Reset() {
	*x = ValueArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vector_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueArray) ProtoMessage() {}

func (x *ValueArray) ProtoReflect() protoreflect.Message {
	mi := &file_vector_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueArray.ProtoReflect.Descriptor instead.
func (*ValueArray) Descriptor() ([]byte, []int) {
	return file_vector_event_proto_rawDescGZIP(), []int{3}
}

func (x *ValueArray) GetItems() []*Value {
	if x != nil {
		return x.Items
	}
	return nil
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//	*Value_RawBytes
	//	*Value_Timestamp
	//	*Value_Integer
	//	*Value_Float
	//	*Value_Boolean
	//	*Value_Map
	//	*Value_Array
	//	*Value_Null
	Kind isValue_Kind `protobuf_oneof:"kind"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vector_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_vector_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_vector_event_proto_rawDescGZIP(), []int{4}
}

func (m *Value) GetKind() isValue_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Value) GetRawBytes() []byte {
	if x, ok := x.GetKind().(*Value_RawBytes); ok {
		return x.RawBytes
	}
	return nil
}

func (x *Value) GetTimestamp() *timestamppb.Timestamp {
	if x, ok := x.GetKind().(*Value_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *Value) GetInteger() int64 {
	if x, ok := x.GetKind().(*Value_Integer); ok {
		return x.Integer
	}
	return 0
}

func (x *Value) GetFloat() float64 {
	if x, ok := x.GetKind().(*Value_Float); ok {
		return x.Float
	}
	return 0
}

func (x *Value) GetBoolean() bool {
	if x, ok := x.GetKind().(*Value_Boolean); ok {
		return x.Boolean
	}
	return false
}

func (x *Value) GetMap() *ValueMap {
	if x, ok := x.GetKind().(*Value_Map); ok {
		return x.Map
	}
	return nil
}

func (x *Value) GetArray() *ValueArray {
	if x, ok := x.GetKind().(*Value_Array); ok {
		return x.Array
	}
	return nil
}

func (x *Value) GetNull() ValueNull {
	if x, ok := x.GetKind().(*Value_Null); ok {
		return x.Null
	}
	return ValueNull_NULL_VALUE
}

type isValue_Kind interface {
	isValue_Kind()
}

type Value_RawBytes struct {
	RawBytes []byte `protobuf:"bytes,1,opt,name=raw_bytes,json=rawBytes,proto3,oneof"`
}

type Value_Timestamp struct {
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3,oneof"`
}

type Value_Integer struct {
	Integer int64 `protobuf:"varint,4,opt,name=integer,proto3,oneof"`
}

type Value_Float struct {
	Float float64 `protobuf:"fixed64,5,opt,name=float,proto3,oneof"`
}

type Value_Boolean struct {
	Boolean bool `protobuf:"varint,6,opt,name=boolean,proto3,oneof"`
}

type Value_Map struct {
	Map *ValueMap `protobuf:"bytes,7,opt,name=map,proto3,oneof"`
}

type Value_Array struct {
	Array *ValueArray `protobuf:"bytes,8,opt,name=array,proto3,oneof"`
}

type Value_Null struct {
	Null ValueNull `protobuf:"varint,9,opt,name=null,proto3,enum=event.proto.ValueNull,oneof"`
}

func (*Value_RawBytes) isValue_Kind() {}

func (*Value_Timestamp) isValue_Kind() {}

func (*Value_Integer) isValue_Kind() {}

func (*Value_Float) isValue_Kind() {}

func (*Value_Boolean) isValue_Kind() {}

func (*Value_Map) isValue_Kind() {}

func (*Value_Array) isValue_Kind() {}

func (*Value_Null) isValue_Kind() {}

type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Tags      map[string]string      `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Kind      Metric_Kind            `protobuf:"varint,4,opt,name=kind,proto3,enum=event.proto.Metric_Kind" json:"kind,omitempty"`
	// Types that are assignable to Value:
	//	*Metric_Counter
	//	*Metric_Gauge
	//	*Metric_Set
	//	*Metric_Distribution1
	//	*Metric_AggregatedHistogram1
	//	*Metric_AggregatedSummary1
	//	*Metric_Distribution2
	//	*Metric_AggregatedHistogram2
	//	*Metric_AggregatedSummary2
	Value     isMetric_Value `protobuf_oneof:"value"`
	Namespace string         `protobuf:"bytes,11,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vector_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_vector_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_vector_event_proto_rawDescGZIP(), []int{5}
}

func (x *Metric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metric) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Metric) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Metric) GetKind() Metric_Kind {
	if x != nil {
		return x.Kind
	}
	return Metric_Incremental
}

func (m *Metric) GetValue() isMetric_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Metric) GetCounter() *Counter {
	if x, ok := x.GetValue().(*Metric_Counter); ok {
		return x.Counter
	}
	return nil
}

func (x *Metric) GetGauge() *Gauge {
	if x, ok := x.GetValue().(*Metric_Gauge); ok {
		return x.Gauge
	}
	return nil
}

func (x *Metric) GetSet() *Set {
	if x, ok := x.GetValue().(*Metric_Set); ok {
		return x.Set
	}
	return nil
}

func (x *Metric) GetDistribution1() *Distribution1 {
	if x, ok := x.GetValue().(*Metric_Distribution1); ok {
		return x.Distribution1
	}
	return nil
}

func (x *Metric) GetAggregatedHistogram1() *AggregatedHistogram1 {
	if x, ok := x.GetValue().(*Metric_AggregatedHistogram1); ok {
		return x.AggregatedHistogram1
	}
	return nil
}

func (x *Metric) GetAggregatedSummary1() *AggregatedSummary1 {
	if x, ok := x.GetValue().(*Metric_AggregatedSummary1); ok {
		return x.AggregatedSummary1
	}
	return nil
}

func (x *Metric) GetDistribution2() *Distribution2 {
	if x, ok := x.GetValue().(*Metric_Distribution2); ok {
		return x.Distribution2
	}
	return nil
}

func (x *Metric) GetAggregatedHistogram2() *AggregatedHistogram2 {
	if x, ok := x.GetValue().(*Metric_AggregatedHistogram2); ok {
		return x.AggregatedHistogram2
	}
	return nil
}

func (x *Metric) GetAggregatedSummary2() *AggregatedSummary2 {
	if x, ok := x.GetValue().(*Metric_AggregatedSummary2); ok {
		return x.AggregatedSummary2
	}
	return nil
}

func (x *Metric) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type isMetric_Value interface {
	isMetric_Value()
}

type Metric_Counter struct {
	Counter *Counter `protobuf:"bytes,5,opt,name=counter,proto3,oneof"`
}

type Metric_Gauge struct {
	Gauge *Gauge `protobuf:"bytes,6,opt,name=gauge,proto3,oneof"`
}

type Metric_Set struct {
	Set *Set `protobuf:"bytes,7,opt,name=set,proto3,oneof"`
}

type Metric_Distribution1 struct {
	Distribution1 *Distribution1 `protobuf:"bytes,8,opt,name=distribution1,proto3,oneof"`
}

type Metric_AggregatedHistogram1 struct {
	AggregatedHistogram1 *AggregatedHistogram1 `protobuf:"bytes,9,opt,name=aggregated_histogram1,json=aggregatedHistogram1,proto3,oneof"`
}

type Metric_AggregatedSummary1 struct {
	AggregatedSummary1 *AggregatedSummary1 `protobuf:"bytes,10,opt,name=aggregated_summary1,json=aggregatedSummary1,proto3,oneof"`
}

type Metric_Distribution2 struct {
	Distribution2 *Distribution2 `protobuf:"bytes,12,opt,name=distribution2,proto3,oneof"`
}

type Metric_AggregatedHistogram2 struct {
	AggregatedHistogram2 *AggregatedHistogram2 `protobuf:"bytes,13,opt,name=aggregated_histogram2,json=aggregatedHistogram2,proto3,oneof"`
}

type Metric_AggregatedSummary2 struct {
	AggregatedSummary2 *AggregatedSummary2 `protobuf:"bytes,14,opt,name=aggregated_summary2,json=aggregatedSummary2,proto3,oneof"`
}

func (*Metric_Counter) isMetric_Value() {}

func (*Metric_Gauge) isMetric_Value() {}

func (*Metric_Set) isMetric_Value() {}

func (*Metric_Distribution1) isMetric_Value() {}

func (*Metric_AggregatedHistogram1) isMetric_Value() {}

func (*Metric_AggregatedSummary1) isMetric_Value() {}

func (*Metric_Distribution2) isMetric_Value() {}

func (*Metric_AggregatedHistogram2) isMetric_Value() {}

func (*Metric_AggregatedSummary2) isMetric_Value() {}

type Counter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Counter) Reset() {
	*x = Counter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vector_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Counter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Counter) ProtoMessage() {}

func (x *Counter) ProtoReflect() protoreflect.Message {
	mi := &file_vector_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Counter.ProtoReflect.Descriptor instead.
func (*Counter) Descriptor() ([]byte, []int) {
	return file_vector_event_proto_rawDescGZIP(), []int{6}
}

func (x *Counter) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Gauge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Gauge) Reset() {
	*x = Gauge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vector_event_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gauge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gauge) ProtoMessage() {}

func (x *Gauge) ProtoReflect() protoreflect.Message {
	mi := &file_vector_event_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gauge.ProtoReflect.Descriptor instead.
func (*Gauge) Descriptor() ([]byte, []int) {
	return file_vector_event_proto_rawDescGZIP(), []int{7}
}

func (x *Gauge) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Set struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Set) Reset() {
	*x = Set{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vector_event_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Set) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Set) ProtoMessage() {}

func (x *Set) ProtoReflect() protoreflect.Message {
	mi := &file_vector_event_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Set.ProtoReflect.Descriptor instead.
func (*Set) Descriptor() ([]byte, []int) {
	return file_vector_event_proto_rawDescGZIP(), []int{8}
}

func (x *Set) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type Distribution1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values      []float64     `protobuf:"fixed64,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	SampleRates []uint32      `protobuf:"varint,2,rep,packed,name=sample_rates,json=sampleRates,proto3" json:"sample_rates,omitempty"`
	Statistic   StatisticKind `protobuf:"varint,3,opt,name=statistic,proto3,enum=event.proto.StatisticKind" json:"statistic,omitempty"`
}

func (x *Distribution1) Reset() {
	*x = Distribution1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vector_event_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Distribution1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Distribution1) ProtoMessage() {}

func (x *Distribution1) ProtoReflect() protoreflect.Message {
	mi := &file_vector_event_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Distribution1.ProtoReflect.Descriptor instead.
func (*Distribution1) Descriptor() ([]byte, []int) {
	return file_vector_event_proto_rawDescGZIP(), []int{9}
}

func (x *Distribution1) GetValues() []float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Distribution1) GetSampleRates() []uint32 {
	if x != nil {
		return x.SampleRates
	}
	return nil
}

func (x *Distribution1) GetStatistic() StatisticKind {
	if x != nil {
		return x.Statistic
	}
	return StatisticKind_Histogram
}

type Distribution2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Samples   []*DistributionSample `protobuf:"bytes,1,rep,name=samples,proto3" json:"samples,omitempty"`
	Statistic StatisticKind         `protobuf:"varint,2,opt,name=statistic,proto3,enum=event.proto.StatisticKind" json:"statistic,omitempty"`
}

func (x *Distribution2) Reset() {
	*x = Distribution2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vector_event_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Distribution2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Distribution2) ProtoMessage() {}

func (x *Distribution2) ProtoReflect() protoreflect.Message {
	mi := &file_vector_event_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Distribution2.ProtoReflect.Descriptor instead.
func (*Distribution2) Descriptor() ([]byte, []int) {
	return file_vector_event_proto_rawDescGZIP(), []int{10}
}

func (x *Distribution2) GetSamples() []*DistributionSample {
	if x != nil {
		return x.Samples
	}
	return nil
}

func (x *Distribution2) GetStatistic() StatisticKind {
	if x != nil {
		return x.Statistic
	}
	return StatisticKind_Histogram
}

type DistributionSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Rate  uint32  `protobuf:"varint,2,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *DistributionSample) Reset() {
	*x = DistributionSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vector_event_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributionSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributionSample) ProtoMessage() {}

func (x *DistributionSample) ProtoReflect() protoreflect.Message {
	mi := &file_vector_event_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributionSample.ProtoReflect.Descriptor instead.
func (*DistributionSample) Descriptor() ([]byte, []int) {
	return file_vector_event_proto_rawDescGZIP(), []int{11}
}

func (x *DistributionSample) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DistributionSample) GetRate() uint32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

type AggregatedHistogram1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buckets []float64 `protobuf:"fixed64,1,rep,packed,name=buckets,proto3" json:"buckets,omitempty"`
	Counts  []uint32  `protobuf:"varint,2,rep,packed,name=counts,proto3" json:"counts,omitempty"`
	Count   uint32    `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Sum     float64   `protobuf:"fixed64,4,opt,name=sum,proto3" json:"sum,omitempty"`
}

func (x *AggregatedHistogram1) Reset() {
	*x = AggregatedHistogram1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vector_event_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedHistogram1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedHistogram1) ProtoMessage() {}

func (x *AggregatedHistogram1) ProtoReflect() protoreflect.Message {
	mi := &file_vector_event_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedHistogram1.ProtoReflect.Descriptor instead.
func (*AggregatedHistogram1) Descriptor() ([]byte, []int) {
	return file_vector_event_proto_rawDescGZIP(), []int{12}
}

func (x *AggregatedHistogram1) GetBuckets() []float64 {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *AggregatedHistogram1) GetCounts() []uint32 {
	if x != nil {
		return x.Counts
	}
	return nil
}

func (x *AggregatedHistogram1) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AggregatedHistogram1) GetSum() float64 {
	if x != nil {
		return x.Sum
	}
	return 0
}

type AggregatedHistogram2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buckets []*HistogramBucket `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty"`
	Count   uint32             `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Sum     float64            `protobuf:"fixed64,3,opt,name=sum,proto3" json:"sum,omitempty"`
}

func (x *AggregatedHistogram2) Reset() {
	*x = AggregatedHistogram2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vector_event_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedHistogram2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedHistogram2) ProtoMessage() {}

func (x *AggregatedHistogram2) ProtoReflect() protoreflect.Message {
	mi := &file_vector_event_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedHistogram2.ProtoReflect.Descriptor instead.
func (*AggregatedHistogram2) Descriptor() ([]byte, []int) {
	return file_vector_event_proto_rawDescGZIP(), []int{13}
}

func (x *AggregatedHistogram2) GetBuckets() []*HistogramBucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *AggregatedHistogram2) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AggregatedHistogram2) GetSum() float64 {
	if x != nil {
		return x.Sum
	}
	return 0
}

type HistogramBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpperLimit float64 `protobuf:"fixed64,1,opt,name=upper_limit,json=upperLimit,proto3" json:"upper_limit,omitempty"`
	Count      uint32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *HistogramBucket) Reset() {
	*x = HistogramBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vector_event_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistogramBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramBucket) ProtoMessage() {}

func (x *HistogramBucket) ProtoReflect() protoreflect.Message {
	mi := &file_vector_event_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramBucket.ProtoReflect.Descriptor instead.
func (*HistogramBucket) Descriptor() ([]byte, []int) {
	return file_vector_event_proto_rawDescGZIP(), []int{14}
}

func (x *HistogramBucket) GetUpperLimit() float64 {
	if x != nil {
		return x.UpperLimit
	}
	return 0
}

func (x *HistogramBucket) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type AggregatedSummary1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quantiles []float64 `protobuf:"fixed64,1,rep,packed,name=quantiles,proto3" json:"quantiles,omitempty"`
	Values    []float64 `protobuf:"fixed64,2,rep,packed,name=values,proto3" json:"values,omitempty"`
	Count     uint32    `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Sum       float64   `protobuf:"fixed64,4,opt,name=sum,proto3" json:"sum,omitempty"`
}

func (x *AggregatedSummary1) Reset() {
	*x = AggregatedSummary1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vector_event_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedSummary1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedSummary1) ProtoMessage() {}

func (x *AggregatedSummary1) ProtoReflect() protoreflect.Message {
	mi := &file_vector_event_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedSummary1.ProtoReflect.Descriptor instead.
func (*AggregatedSummary1) Descriptor() ([]byte, []int) {
	return file_vector_event_proto_rawDescGZIP(), []int{15}
}

func (x *AggregatedSummary1) GetQuantiles() []float64 {
	if x != nil {
		return x.Quantiles
	}
	return nil
}

func (x *AggregatedSummary1) GetValues() []float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *AggregatedSummary1) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AggregatedSummary1) GetSum() float64 {
	if x != nil {
		return x.Sum
	}
	return 0
}

type AggregatedSummary2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quantiles []*SummaryQuantile `protobuf:"bytes,1,rep,name=quantiles,proto3" json:"quantiles,omitempty"`
	Count     uint32             `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Sum       float64            `protobuf:"fixed64,3,opt,name=sum,proto3" json:"sum,omitempty"`
}

func (x *AggregatedSummary2) Reset() {
	*x = AggregatedSummary2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vector_event_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedSummary2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedSummary2) ProtoMessage() {}

func (x *AggregatedSummary2) ProtoReflect() protoreflect.Message {
	mi := &file_vector_event_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedSummary2.ProtoReflect.Descriptor instead.
func (*AggregatedSummary2) Descriptor() ([]byte, []int) {
	return file_vector_event_proto_rawDescGZIP(), []int{16}
}

func (x *AggregatedSummary2) GetQuantiles() []*SummaryQuantile {
	if x != nil {
		return x.Quantiles
	}
	return nil
}

func (x *AggregatedSummary2) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AggregatedSummary2) GetSum() float64 {
	if x != nil {
		return x.Sum
	}
	return 0
}

type SummaryQuantile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpperLimit float64 `protobuf:"fixed64,1,opt,name=upper_limit,json=upperLimit,proto3" json:"upper_limit,omitempty"`
	Value      float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SummaryQuantile) Reset() {
	*x = SummaryQuantile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vector_event_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryQuantile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryQuantile) ProtoMessage() {}

func (x *SummaryQuantile) ProtoReflect() protoreflect.Message {
	mi := &file_vector_event_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryQuantile.ProtoReflect.Descriptor instead.
func (*SummaryQuantile) Descriptor() ([]byte, []int) {
	return file_vector_event_proto_rawDescGZIP(), []int{17}
}

func (x *SummaryQuantile) GetUpperLimit() float64 {
	if x != nil {
		return x.UpperLimit
	}
	return 0
}

func (x *SummaryQuantile) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_vector_event_proto protoreflect.FileDescriptor

var file_vector_event_proto_rawDesc = []byte{
	0x0a, 0x12, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x6c, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f,
	0x67, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x2d, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x48, 0x00, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x8a, 0x01, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x4d,
	0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x94, 0x01,
	0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x39, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61,
	0x70, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x4d, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x36, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xca, 0x02, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x72, 0x61, 0x77, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x72, 0x61, 0x77,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1a, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x05,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x12, 0x29, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x2f, 0x0a, 0x05,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x12, 0x2c, 0x0a,
	0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4e,
	0x75, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xa6, 0x07, 0x0a, 0x06, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x05, 0x67, 0x61, 0x75, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x61, 0x75, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x67, 0x61, 0x75, 0x67,
	0x65, 0x12, 0x24, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x12, 0x58, 0x0a, 0x15, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x31, 0x48, 0x00, 0x52,
	0x14, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x52, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x31, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x31, 0x48, 0x00, 0x52, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x31, 0x12, 0x42, 0x0a, 0x0d, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x48, 0x00, 0x52, 0x0d,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0x58, 0x0a,
	0x15, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x32, 0x48,
	0x00, 0x52, 0x14, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x52, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x32, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x32, 0x48, 0x00, 0x52, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x25, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x10, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x1f, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x1d, 0x0a, 0x05, 0x47, 0x61, 0x75, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x1d, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0x84, 0x01, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x22, 0x84, 0x01, 0x0a, 0x0d, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x22,
	0x3e, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x22,
	0x70, 0x0a, 0x14, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x73, 0x75,
	0x6d, 0x22, 0x76, 0x0a, 0x14, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x36, 0x0a, 0x07, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x22, 0x48, 0x0a, 0x0f, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x72, 0x0a, 0x12, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x09, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x22, 0x78, 0x0a, 0x12, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x32, 0x12, 0x3a, 0x0a,
	0x09, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x52, 0x09,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x73, 0x75,
	0x6d, 0x22, 0x48, 0x0a, 0x0f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x1b, 0x0a, 0x09, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x55, 0x4c, 0x4c,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x00, 0x2a, 0x2b, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x10, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vector_event_proto_rawDescOnce sync.Once
	file_vector_event_proto_rawDescData = file_vector_event_proto_rawDesc
)

func file_vector_event_proto_rawDescGZIP() []byte {
	file_vector_event_proto_rawDescOnce.Do(func() {
		file_vector_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_vector_event_proto_rawDescData)
	})
	return file_vector_event_proto_rawDescData
}

var file_vector_event_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_vector_event_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_vector_event_proto_goTypes = []interface{}{
	(ValueNull)(0),                // 0: event.proto.ValueNull
	(StatisticKind)(0),            // 1: event.proto.StatisticKind
	(Metric_Kind)(0),              // 2: event.proto.Metric.Kind
	(*EventWrapper)(nil),          // 3: event.proto.EventWrapper
	(*Log)(nil),                   // 4: event.proto.Log
	(*ValueMap)(nil),              // 5: event.proto.ValueMap
	(*ValueArray)(nil),            // 6: event.proto.ValueArray
	(*Value)(nil),                 // 7: event.proto.Value
	(*Metric)(nil),                // 8: event.proto.Metric
	(*Counter)(nil),               // 9: event.proto.Counter
	(*Gauge)(nil),                 // 10: event.proto.Gauge
	(*Set)(nil),                   // 11: event.proto.Set
	(*Distribution1)(nil),         // 12: event.proto.Distribution1
	(*Distribution2)(nil),         // 13: event.proto.Distribution2
	(*DistributionSample)(nil),    // 14: event.proto.DistributionSample
	(*AggregatedHistogram1)(nil),  // 15: event.proto.AggregatedHistogram1
	(*AggregatedHistogram2)(nil),  // 16: event.proto.AggregatedHistogram2
	(*HistogramBucket)(nil),       // 17: event.proto.HistogramBucket
	(*AggregatedSummary1)(nil),    // 18: event.proto.AggregatedSummary1
	(*AggregatedSummary2)(nil),    // 19: event.proto.AggregatedSummary2
	(*SummaryQuantile)(nil),       // 20: event.proto.SummaryQuantile
	nil,                           // 21: event.proto.Log.FieldsEntry
	nil,                           // 22: event.proto.ValueMap.FieldsEntry
	nil,                           // 23: event.proto.Metric.TagsEntry
	(*timestamppb.Timestamp)(nil), // 24: google.protobuf.Timestamp
}
var file_vector_event_proto_depIdxs = []int32{
	4,  // 0: event.proto.EventWrapper.log:type_name -> event.proto.Log
	8,  // 1: event.proto.EventWrapper.metric:type_name -> event.proto.Metric
	21, // 2: event.proto.Log.fields:type_name -> event.proto.Log.FieldsEntry
	22, // 3: event.proto.ValueMap.fields:type_name -> event.proto.ValueMap.FieldsEntry
	7,  // 4: event.proto.ValueArray.items:type_name -> event.proto.Value
	24, // 5: event.proto.Value.timestamp:type_name -> google.protobuf.Timestamp
	5,  // 6: event.proto.Value.map:type_name -> event.proto.ValueMap
	6,  // 7: event.proto.Value.array:type_name -> event.proto.ValueArray
	0,  // 8: event.proto.Value.null:type_name -> event.proto.ValueNull
	24, // 9: event.proto.Metric.timestamp:type_name -> google.protobuf.Timestamp
	23, // 10: event.proto.Metric.tags:type_name -> event.proto.Metric.TagsEntry
	2,  // 11: event.proto.Metric.kind:type_name -> event.proto.Metric.Kind
	9,  // 12: event.proto.Metric.counter:type_name -> event.proto.Counter
	10, // 13: event.proto.Metric.gauge:type_name -> event.proto.Gauge
	11, // 14: event.proto.Metric.set:type_name -> event.proto.Set
	12, // 15: event.proto.Metric.distribution1:type_name -> event.proto.Distribution1
	15, // 16: event.proto.Metric.aggregated_histogram1:type_name -> event.proto.AggregatedHistogram1
	18, // 17: event.proto.Metric.aggregated_summary1:type_name -> event.proto.AggregatedSummary1
	13, // 18: event.proto.Metric.distribution2:type_name -> event.proto.Distribution2
	16, // 19: event.proto.Metric.aggregated_histogram2:type_name -> event.proto.AggregatedHistogram2
	19, // 20: event.proto.Metric.aggregated_summary2:type_name -> event.proto.AggregatedSummary2
	1,  // 21: event.proto.Distribution1.statistic:type_name -> event.proto.StatisticKind
	14, // 22: event.proto.Distribution2.samples:type_name -> event.proto.DistributionSample
	1,  // 23: event.proto.Distribution2.statistic:type_name -> event.proto.StatisticKind
	17, // 24: event.proto.AggregatedHistogram2.buckets:type_name -> event.proto.HistogramBucket
	20, // 25: event.proto.AggregatedSummary2.quantiles:type_name -> event.proto.SummaryQuantile
	7,  // 26: event.proto.Log.FieldsEntry.value:type_name -> event.proto.Value
	7,  // 27: event.proto.ValueMap.FieldsEntry.value:type_name -> event.proto.Value
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_vector_event_proto_init() }
func file_vector_event_proto_init() {
	if File_vector_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vector_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vector_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vector_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vector_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vector_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vector_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vector_event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Counter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vector_event_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gauge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vector_event_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Set); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vector_event_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Distribution1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vector_event_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Distribution2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vector_event_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistributionSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vector_event_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedHistogram1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vector_event_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedHistogram2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vector_event_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistogramBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vector_event_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedSummary1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vector_event_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedSummary2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vector_event_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryQuantile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vector_event_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*EventWrapper_Log)(nil),
		(*EventWrapper_Metric)(nil),
	}
	file_vector_event_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Value_RawBytes)(nil),
		(*Value_Timestamp)(nil),
		(*Value_Integer)(nil),
		(*Value_Float)(nil),
		(*Value_Boolean)(nil),
		(*Value_Map)(nil),
		(*Value_Array)(nil),
		(*Value_Null)(nil),
	}
	file_vector_event_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Metric_Counter)(nil),
		(*Metric_Gauge)(nil),
		(*Metric_Set)(nil),
		(*Metric_Distribution1)(nil),
		(*Metric_AggregatedHistogram1)(nil),
		(*Metric_AggregatedSummary1)(nil),
		(*Metric_Distribution2)(nil),
		(*Metric_AggregatedHistogram2)(nil),
		(*Metric_AggregatedSummary2)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vector_event_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vector_event_proto_goTypes,
		DependencyIndexes: file_vector_event_proto_depIdxs,
		EnumInfos:         file_vector_event_proto_enumTypes,
		MessageInfos:      file_vector_event_proto_msgTypes,
	}.Build()
	File_vector_event_proto = out.File
	file_vector_event_proto_rawDesc = nil
	file_vector_event_proto_goTypes = nil
	file_vector_event_proto_depIdxs = nil
}
